### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Comment {
  author: User!
  authorId: String!
  id: String!
  post: Post!
  postId: String!
  text: String!
}

input CommentCreateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutAuthorInput!]
}

input CommentCreateManyWithoutPostInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutPostInput!]
}

input CommentCreateWithoutAuthorInput {
  createdAt: DateTime
  id: String
  post: PostCreateOneWithoutCommentsInput!
  text: String!
  updatedAt: DateTime
}

input CommentCreateWithoutPostInput {
  author: UserCreateOneWithoutCommentsInput!
  createdAt: DateTime
  id: String
  text: String!
  updatedAt: DateTime
}

input CommentFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  authorId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  postId: StringFilter
  text: StringFilter
  updatedAt: DateTimeFilter
}

input CommentUpdateManyDataInput {
  createdAt: DateTime
  id: String
  text: String
  updatedAt: DateTime
}

input CommentUpdateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutAuthorInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutPostInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutPostInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  data: CommentUpdateManyDataInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateWithoutAuthorDataInput {
  createdAt: DateTime
  id: String
  post: PostUpdateOneRequiredWithoutCommentsInput
  text: String
  updatedAt: DateTime
}

input CommentUpdateWithoutPostDataInput {
  author: UserUpdateOneRequiredWithoutCommentsInput
  createdAt: DateTime
  id: String
  text: String
  updatedAt: DateTime
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  data: CommentUpdateWithoutAuthorDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  data: CommentUpdateWithoutPostDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  update: CommentUpdateWithoutAuthorDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  create: CommentCreateWithoutPostInput!
  update: CommentUpdateWithoutPostDataInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  author: UserWhereInput
  authorId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  post: PostWhereInput
  postId: StringFilter
  text: StringFilter
  updatedAt: DateTimeFilter
}

input CommentWhereUniqueInput {
  id: String
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type File {
  file: String!
  id: String!
  post: Post!
  postId: String!
}

input FileCreateManyWithoutPostInput {
  connect: [FileWhereUniqueInput!]
  create: [FileCreateWithoutPostInput!]
}

input FileCreateWithoutPostInput {
  createdAt: DateTime
  file: String!
  id: String
  updatedAt: DateTime
}

input FileFilter {
  every: FileWhereInput
  none: FileWhereInput
  some: FileWhereInput
}

input FileScalarWhereInput {
  AND: [FileScalarWhereInput!]
  createdAt: DateTimeFilter
  file: StringFilter
  id: StringFilter
  NOT: [FileScalarWhereInput!]
  OR: [FileScalarWhereInput!]
  postId: StringFilter
  updatedAt: DateTimeFilter
}

input FileUpdateManyDataInput {
  createdAt: DateTime
  file: String
  id: String
  updatedAt: DateTime
}

input FileUpdateManyWithoutPostInput {
  connect: [FileWhereUniqueInput!]
  create: [FileCreateWithoutPostInput!]
  delete: [FileWhereUniqueInput!]
  deleteMany: [FileScalarWhereInput!]
  disconnect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutPostInput!]
}

input FileUpdateManyWithWhereNestedInput {
  data: FileUpdateManyDataInput!
  where: FileScalarWhereInput!
}

input FileUpdateWithoutPostDataInput {
  createdAt: DateTime
  file: String
  id: String
  updatedAt: DateTime
}

input FileUpdateWithWhereUniqueWithoutPostInput {
  data: FileUpdateWithoutPostDataInput!
  where: FileWhereUniqueInput!
}

input FileUpsertWithWhereUniqueWithoutPostInput {
  create: FileCreateWithoutPostInput!
  update: FileUpdateWithoutPostDataInput!
  where: FileWhereUniqueInput!
}

input FileWhereInput {
  AND: [FileWhereInput!]
  createdAt: DateTimeFilter
  file: StringFilter
  id: StringFilter
  NOT: [FileWhereInput!]
  OR: [FileWhereInput!]
  post: PostWhereInput
  postId: StringFilter
  updatedAt: DateTimeFilter
}

input FileWhereUniqueInput {
  id: String
}

type Like {
  id: String!
  post: Post!
  postId: String!
  user: User!
  userId: String!
}

input LikeCreateManyWithoutPostInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutPostInput!]
}

input LikeCreateManyWithoutUserInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutUserInput!]
}

input LikeCreateWithoutPostInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  user: UserCreateOneWithoutLikesInput!
}

input LikeCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  post: PostCreateOneWithoutLikesInput!
  updatedAt: DateTime
}

input LikeFilter {
  every: LikeWhereInput
  none: LikeWhereInput
  some: LikeWhereInput
}

input LikeScalarWhereInput {
  AND: [LikeScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [LikeScalarWhereInput!]
  OR: [LikeScalarWhereInput!]
  postId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input LikeUpdateManyDataInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input LikeUpdateManyWithoutPostInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutPostInput!]
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [LikeUpdateManyWithWhereNestedInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutPostInput!]
}

input LikeUpdateManyWithoutUserInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutUserInput!]
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [LikeUpdateManyWithWhereNestedInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutUserInput!]
}

input LikeUpdateManyWithWhereNestedInput {
  data: LikeUpdateManyDataInput!
  where: LikeScalarWhereInput!
}

input LikeUpdateWithoutPostDataInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutLikesInput
}

input LikeUpdateWithoutUserDataInput {
  createdAt: DateTime
  id: String
  post: PostUpdateOneRequiredWithoutLikesInput
  updatedAt: DateTime
}

input LikeUpdateWithWhereUniqueWithoutPostInput {
  data: LikeUpdateWithoutPostDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpdateWithWhereUniqueWithoutUserInput {
  data: LikeUpdateWithoutUserDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpsertWithWhereUniqueWithoutPostInput {
  create: LikeCreateWithoutPostInput!
  update: LikeUpdateWithoutPostDataInput!
  where: LikeWhereUniqueInput!
}

input LikeUpsertWithWhereUniqueWithoutUserInput {
  create: LikeCreateWithoutUserInput!
  update: LikeUpdateWithoutUserDataInput!
  where: LikeWhereUniqueInput!
}

input LikeWhereInput {
  AND: [LikeWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  post: PostWhereInput
  postId: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input LikeWhereUniqueInput {
  id: String
}

type Message {
  id: String!
  receiver: User!
  receiverId: String!
  room: Room!
  RoomId: String!
  sender: User!
  senderId: String!
  text: String!
}

input MessageCreateManyWithoutReceiverInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutReceiverInput!]
}

input MessageCreateManyWithoutRoomInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutRoomInput!]
}

input MessageCreateManyWithoutSenderInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutSenderInput!]
}

input MessageCreateWithoutReceiverInput {
  createdAt: DateTime
  id: String
  room: RoomCreateOneWithoutMessegesInput!
  sender: UserCreateOneWithoutMessegesSentInput!
  text: String!
  updatedAt: DateTime
}

input MessageCreateWithoutRoomInput {
  createdAt: DateTime
  id: String
  receiver: UserCreateOneWithoutMessegesReceivedInput!
  sender: UserCreateOneWithoutMessegesSentInput!
  text: String!
  updatedAt: DateTime
}

input MessageCreateWithoutSenderInput {
  createdAt: DateTime
  id: String
  receiver: UserCreateOneWithoutMessegesReceivedInput!
  room: RoomCreateOneWithoutMessegesInput!
  text: String!
  updatedAt: DateTime
}

input MessageFilter {
  every: MessageWhereInput
  none: MessageWhereInput
  some: MessageWhereInput
}

input MessageScalarWhereInput {
  AND: [MessageScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  receiverId: StringFilter
  RoomId: StringFilter
  senderId: StringFilter
  text: StringFilter
  updatedAt: DateTimeFilter
}

input MessageUpdateManyDataInput {
  createdAt: DateTime
  id: String
  text: String
  updatedAt: DateTime
}

input MessageUpdateManyWithoutReceiverInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutReceiverInput!]
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutReceiverInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutReceiverInput!]
}

input MessageUpdateManyWithoutRoomInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutRoomInput!]
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutRoomInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutRoomInput!]
}

input MessageUpdateManyWithoutSenderInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutSenderInput!]
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutSenderInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutSenderInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  data: MessageUpdateManyDataInput!
  where: MessageScalarWhereInput!
}

input MessageUpdateWithoutReceiverDataInput {
  createdAt: DateTime
  id: String
  room: RoomUpdateOneRequiredWithoutMessegesInput
  sender: UserUpdateOneRequiredWithoutMessegesSentInput
  text: String
  updatedAt: DateTime
}

input MessageUpdateWithoutRoomDataInput {
  createdAt: DateTime
  id: String
  receiver: UserUpdateOneRequiredWithoutMessegesReceivedInput
  sender: UserUpdateOneRequiredWithoutMessegesSentInput
  text: String
  updatedAt: DateTime
}

input MessageUpdateWithoutSenderDataInput {
  createdAt: DateTime
  id: String
  receiver: UserUpdateOneRequiredWithoutMessegesReceivedInput
  room: RoomUpdateOneRequiredWithoutMessegesInput
  text: String
  updatedAt: DateTime
}

input MessageUpdateWithWhereUniqueWithoutReceiverInput {
  data: MessageUpdateWithoutReceiverDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpdateWithWhereUniqueWithoutRoomInput {
  data: MessageUpdateWithoutRoomDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpdateWithWhereUniqueWithoutSenderInput {
  data: MessageUpdateWithoutSenderDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithWhereUniqueWithoutReceiverInput {
  create: MessageCreateWithoutReceiverInput!
  update: MessageUpdateWithoutReceiverDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithWhereUniqueWithoutRoomInput {
  create: MessageCreateWithoutRoomInput!
  update: MessageUpdateWithoutRoomDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithWhereUniqueWithoutSenderInput {
  create: MessageCreateWithoutSenderInput!
  update: MessageUpdateWithoutSenderDataInput!
  where: MessageWhereUniqueInput!
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  receiver: UserWhereInput
  receiverId: StringFilter
  room: RoomWhereInput
  RoomId: StringFilter
  sender: UserWhereInput
  senderId: StringFilter
  text: StringFilter
  updatedAt: DateTimeFilter
}

input MessageWhereUniqueInput {
  id: String
}

type Mutation {
  """Confirm User Login Secrete"""
  ConfirmSecret(email: String!, key: String!): String!

  """Create New Comment"""
  CreateComment(postId: String!, text: String!): Comment!

  """Create Chat Message"""
  CreateMessage(roomId: String, text: String, toId: String): Message

  """Create A Single post With Auther and file Connection"""
  CreatePost(caption: String!, files: [String!], location: String): Post!
  createUser(
    avatar: String
    bio: String

    """Email is required"""
    email: String!
    firstName: String
    lastName: String

    """User Name is A Required Field"""
    username: String!
  ): User!

  """Delete Comment"""
  DeleteComment(commentId: String!): String!
  deleteOneUser(where: UserWhereUniqueInput!): User

  """DeLete Post"""
  DeletePost(postId: String!): String!

  """Edit Comment"""
  EditComment(commentId: String!, text: String!): Comment!

  """Edit Post"""
  EditPost(caption: String, files: [String!], location: String, postId: String!): Post!

  """Follow and unfollow User"""
  FollowUnfollow(id: String): User!

  """User Login Secrete Request"""
  RequestLoginSecret(email: String!): User!

  """Like Or Remove Like Post"""
  ToggleLikePost(postId: String!): String!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Post {
  author: User!
  authorId: String!
  caption: String!
  id: String!
  location: String
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateOneWithoutCommentsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutCommentsInput
}

input PostCreateOneWithoutLikesInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutLikesInput
}

input PostCreateWithoutAuthorInput {
  caption: String!
  comments: CommentCreateManyWithoutPostInput
  createdAt: DateTime
  files: FileCreateManyWithoutPostInput
  id: String
  likes: LikeCreateManyWithoutPostInput
  location: String
  updatedAt: DateTime
}

input PostCreateWithoutCommentsInput {
  author: UserCreateOneWithoutPostsInput!
  caption: String!
  createdAt: DateTime
  files: FileCreateManyWithoutPostInput
  id: String
  likes: LikeCreateManyWithoutPostInput
  location: String
  updatedAt: DateTime
}

input PostCreateWithoutLikesInput {
  author: UserCreateOneWithoutPostsInput!
  caption: String!
  comments: CommentCreateManyWithoutPostInput
  createdAt: DateTime
  files: FileCreateManyWithoutPostInput
  id: String
  location: String
  updatedAt: DateTime
}

input PostFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  authorId: StringFilter
  caption: StringFilter
  comments: CommentFilter
  createdAt: DateTimeFilter
  files: FileFilter
  id: StringFilter
  likes: LikeFilter
  location: NullableStringFilter
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input PostUpdateManyDataInput {
  caption: String
  createdAt: DateTime
  id: String
  location: String
  updatedAt: DateTime
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithWhereNestedInput {
  data: PostUpdateManyDataInput!
  where: PostScalarWhereInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateOneRequiredWithoutLikesInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutLikesInput
  update: PostUpdateWithoutLikesDataInput
  upsert: PostUpsertWithoutLikesInput
}

input PostUpdateWithoutAuthorDataInput {
  caption: String
  comments: CommentUpdateManyWithoutPostInput
  createdAt: DateTime
  files: FileUpdateManyWithoutPostInput
  id: String
  likes: LikeUpdateManyWithoutPostInput
  location: String
  updatedAt: DateTime
}

input PostUpdateWithoutCommentsDataInput {
  author: UserUpdateOneRequiredWithoutPostsInput
  caption: String
  createdAt: DateTime
  files: FileUpdateManyWithoutPostInput
  id: String
  likes: LikeUpdateManyWithoutPostInput
  location: String
  updatedAt: DateTime
}

input PostUpdateWithoutLikesDataInput {
  author: UserUpdateOneRequiredWithoutPostsInput
  caption: String
  comments: CommentUpdateManyWithoutPostInput
  createdAt: DateTime
  files: FileUpdateManyWithoutPostInput
  id: String
  location: String
  updatedAt: DateTime
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  update: PostUpdateWithoutCommentsDataInput!
}

input PostUpsertWithoutLikesInput {
  create: PostCreateWithoutLikesInput!
  update: PostUpdateWithoutLikesDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  author: UserWhereInput
  authorId: StringFilter
  caption: StringFilter
  comments: CommentFilter
  createdAt: DateTimeFilter
  files: FileFilter
  id: StringFilter
  likes: LikeFilter
  location: NullableStringFilter
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  updatedAt: DateTimeFilter
}

input PostWhereUniqueInput {
  id: String
}

type Query {
  """Current User"""
  CurrentUser: User
  Feeds: [Post!]!

  """Get Single Post"""
  Post(postId: String!): Post

  """Get Single Room"""
  Room(roomId: String!): Room!

  """Post Search Filter"""
  SearchPost(term: String!): [Post!]

  """User Search Filter"""
  UserSearch(term: String!): [User!]
}

type Room {
  id: String!
  messeges(after: MessageWhereUniqueInput, before: MessageWhereUniqueInput, first: Int, last: Int, skip: Int): [Message!]!
  participants(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int): [User!]!
}

input RoomCreateManyWithoutParticipantsInput {
  connect: [RoomWhereUniqueInput!]
  create: [RoomCreateWithoutParticipantsInput!]
}

input RoomCreateOneWithoutMessegesInput {
  connect: RoomWhereUniqueInput
  create: RoomCreateWithoutMessegesInput
}

input RoomCreateWithoutMessegesInput {
  createdAt: DateTime
  id: String
  participants: UserCreateManyWithoutRoomsInput
  updatedAt: DateTime
}

input RoomCreateWithoutParticipantsInput {
  createdAt: DateTime
  id: String
  messeges: MessageCreateManyWithoutRoomInput
  updatedAt: DateTime
}

input RoomFilter {
  every: RoomWhereInput
  none: RoomWhereInput
  some: RoomWhereInput
}

input RoomScalarWhereInput {
  AND: [RoomScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  messeges: MessageFilter
  NOT: [RoomScalarWhereInput!]
  OR: [RoomScalarWhereInput!]
  participants: UserFilter
  updatedAt: DateTimeFilter
}

input RoomUpdateManyDataInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input RoomUpdateManyWithoutParticipantsInput {
  connect: [RoomWhereUniqueInput!]
  create: [RoomCreateWithoutParticipantsInput!]
  delete: [RoomWhereUniqueInput!]
  deleteMany: [RoomScalarWhereInput!]
  disconnect: [RoomWhereUniqueInput!]
  set: [RoomWhereUniqueInput!]
  update: [RoomUpdateWithWhereUniqueWithoutParticipantsInput!]
  updateMany: [RoomUpdateManyWithWhereNestedInput!]
  upsert: [RoomUpsertWithWhereUniqueWithoutParticipantsInput!]
}

input RoomUpdateManyWithWhereNestedInput {
  data: RoomUpdateManyDataInput!
  where: RoomScalarWhereInput!
}

input RoomUpdateOneRequiredWithoutMessegesInput {
  connect: RoomWhereUniqueInput
  create: RoomCreateWithoutMessegesInput
  update: RoomUpdateWithoutMessegesDataInput
  upsert: RoomUpsertWithoutMessegesInput
}

input RoomUpdateWithoutMessegesDataInput {
  createdAt: DateTime
  id: String
  participants: UserUpdateManyWithoutRoomsInput
  updatedAt: DateTime
}

input RoomUpdateWithoutParticipantsDataInput {
  createdAt: DateTime
  id: String
  messeges: MessageUpdateManyWithoutRoomInput
  updatedAt: DateTime
}

input RoomUpdateWithWhereUniqueWithoutParticipantsInput {
  data: RoomUpdateWithoutParticipantsDataInput!
  where: RoomWhereUniqueInput!
}

input RoomUpsertWithoutMessegesInput {
  create: RoomCreateWithoutMessegesInput!
  update: RoomUpdateWithoutMessegesDataInput!
}

input RoomUpsertWithWhereUniqueWithoutParticipantsInput {
  create: RoomCreateWithoutParticipantsInput!
  update: RoomUpdateWithoutParticipantsDataInput!
  where: RoomWhereUniqueInput!
}

input RoomWhereInput {
  AND: [RoomWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  messeges: MessageFilter
  NOT: [RoomWhereInput!]
  OR: [RoomWhereInput!]
  participants: UserFilter
  updatedAt: DateTimeFilter
}

input RoomWhereUniqueInput {
  id: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Subscription {
  """New Message Subscriptions"""
  NewMessage(ROOMID: String!): Message!
}

type User {
  avatar: String
  bio: String!
  email: String!
  firstName: String
  followedBy(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int): [User!]!
  following(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int): [User!]!
  fullName: String
  id: String!
  lastName: String
  likes(after: LikeWhereUniqueInput, before: LikeWhereUniqueInput, first: Int, last: Int, skip: Int): [Like!]!
  posts: [Post!]!
  rooms(after: RoomWhereUniqueInput, before: RoomWhereUniqueInput, first: Int, last: Int, skip: Int): [Room!]!
}

input UserCreateManyWithoutFollowedByInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowedByInput!]
}

input UserCreateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowingInput!]
}

input UserCreateManyWithoutRoomsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutRoomsInput!]
}

input UserCreateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateOneWithoutLikesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutLikesInput
}

input UserCreateOneWithoutMessegesReceivedInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutMessegesReceivedInput
}

input UserCreateOneWithoutMessegesSentInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutMessegesSentInput
}

input UserCreateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateWithoutCommentsInput {
  avatar: String
  bio: String!
  createdAt: DateTime
  email: String!
  firstName: String
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  fullName: String
  id: String
  lastName: String
  likes: LikeCreateManyWithoutUserInput
  loginSecret: String
  messegesReceived: MessageCreateManyWithoutReceiverInput
  messegesSent: MessageCreateManyWithoutSenderInput
  posts: PostCreateManyWithoutAuthorInput
  rooms: RoomCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutFollowedByInput {
  avatar: String
  bio: String!
  comments: CommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  firstName: String
  following: UserCreateManyWithoutFollowedByInput
  fullName: String
  id: String
  lastName: String
  likes: LikeCreateManyWithoutUserInput
  loginSecret: String
  messegesReceived: MessageCreateManyWithoutReceiverInput
  messegesSent: MessageCreateManyWithoutSenderInput
  posts: PostCreateManyWithoutAuthorInput
  rooms: RoomCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutFollowingInput {
  avatar: String
  bio: String!
  comments: CommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  firstName: String
  followedBy: UserCreateManyWithoutFollowingInput
  fullName: String
  id: String
  lastName: String
  likes: LikeCreateManyWithoutUserInput
  loginSecret: String
  messegesReceived: MessageCreateManyWithoutReceiverInput
  messegesSent: MessageCreateManyWithoutSenderInput
  posts: PostCreateManyWithoutAuthorInput
  rooms: RoomCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutLikesInput {
  avatar: String
  bio: String!
  comments: CommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  firstName: String
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  fullName: String
  id: String
  lastName: String
  loginSecret: String
  messegesReceived: MessageCreateManyWithoutReceiverInput
  messegesSent: MessageCreateManyWithoutSenderInput
  posts: PostCreateManyWithoutAuthorInput
  rooms: RoomCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutMessegesReceivedInput {
  avatar: String
  bio: String!
  comments: CommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  firstName: String
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  fullName: String
  id: String
  lastName: String
  likes: LikeCreateManyWithoutUserInput
  loginSecret: String
  messegesSent: MessageCreateManyWithoutSenderInput
  posts: PostCreateManyWithoutAuthorInput
  rooms: RoomCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutMessegesSentInput {
  avatar: String
  bio: String!
  comments: CommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  firstName: String
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  fullName: String
  id: String
  lastName: String
  likes: LikeCreateManyWithoutUserInput
  loginSecret: String
  messegesReceived: MessageCreateManyWithoutReceiverInput
  posts: PostCreateManyWithoutAuthorInput
  rooms: RoomCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutPostsInput {
  avatar: String
  bio: String!
  comments: CommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  firstName: String
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  fullName: String
  id: String
  lastName: String
  likes: LikeCreateManyWithoutUserInput
  loginSecret: String
  messegesReceived: MessageCreateManyWithoutReceiverInput
  messegesSent: MessageCreateManyWithoutSenderInput
  rooms: RoomCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutRoomsInput {
  avatar: String
  bio: String!
  comments: CommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  firstName: String
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  fullName: String
  id: String
  lastName: String
  likes: LikeCreateManyWithoutUserInput
  loginSecret: String
  messegesReceived: MessageCreateManyWithoutReceiverInput
  messegesSent: MessageCreateManyWithoutSenderInput
  posts: PostCreateManyWithoutAuthorInput
  updatedAt: DateTime
  username: String!
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  avatar: NullableStringFilter
  bio: StringFilter
  comments: CommentFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: NullableStringFilter
  followedBy: UserFilter
  following: UserFilter
  fullName: NullableStringFilter
  id: StringFilter
  lastName: NullableStringFilter
  likes: LikeFilter
  loginSecret: NullableStringFilter
  messegesReceived: MessageFilter
  messegesSent: MessageFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  posts: PostFilter
  rooms: RoomFilter
  updatedAt: DateTimeFilter
  username: StringFilter
}

input UserUpdateInput {
  avatar: String
  bio: String
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTime
  email: String
  firstName: String
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  fullName: String
  id: String
  lastName: String
  likes: LikeUpdateManyWithoutUserInput
  loginSecret: String
  messegesReceived: MessageUpdateManyWithoutReceiverInput
  messegesSent: MessageUpdateManyWithoutSenderInput
  posts: PostUpdateManyWithoutAuthorInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  username: String
}

input UserUpdateManyDataInput {
  avatar: String
  bio: String
  createdAt: DateTime
  email: String
  firstName: String
  fullName: String
  id: String
  lastName: String
  loginSecret: String
  updatedAt: DateTime
  username: String
}

input UserUpdateManyWithoutFollowedByInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowedByInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowedByInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowedByInput!]
}

input UserUpdateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
}

input UserUpdateManyWithoutRoomsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutRoomsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRoomsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRoomsInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutLikesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutLikesInput
  update: UserUpdateWithoutLikesDataInput
  upsert: UserUpsertWithoutLikesInput
}

input UserUpdateOneRequiredWithoutMessegesReceivedInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutMessegesReceivedInput
  update: UserUpdateWithoutMessegesReceivedDataInput
  upsert: UserUpsertWithoutMessegesReceivedInput
}

input UserUpdateOneRequiredWithoutMessegesSentInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutMessegesSentInput
  update: UserUpdateWithoutMessegesSentDataInput
  upsert: UserUpsertWithoutMessegesSentInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutCommentsDataInput {
  avatar: String
  bio: String
  createdAt: DateTime
  email: String
  firstName: String
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  fullName: String
  id: String
  lastName: String
  likes: LikeUpdateManyWithoutUserInput
  loginSecret: String
  messegesReceived: MessageUpdateManyWithoutReceiverInput
  messegesSent: MessageUpdateManyWithoutSenderInput
  posts: PostUpdateManyWithoutAuthorInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  username: String
}

input UserUpdateWithoutFollowedByDataInput {
  avatar: String
  bio: String
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTime
  email: String
  firstName: String
  following: UserUpdateManyWithoutFollowedByInput
  fullName: String
  id: String
  lastName: String
  likes: LikeUpdateManyWithoutUserInput
  loginSecret: String
  messegesReceived: MessageUpdateManyWithoutReceiverInput
  messegesSent: MessageUpdateManyWithoutSenderInput
  posts: PostUpdateManyWithoutAuthorInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  username: String
}

input UserUpdateWithoutFollowingDataInput {
  avatar: String
  bio: String
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTime
  email: String
  firstName: String
  followedBy: UserUpdateManyWithoutFollowingInput
  fullName: String
  id: String
  lastName: String
  likes: LikeUpdateManyWithoutUserInput
  loginSecret: String
  messegesReceived: MessageUpdateManyWithoutReceiverInput
  messegesSent: MessageUpdateManyWithoutSenderInput
  posts: PostUpdateManyWithoutAuthorInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  username: String
}

input UserUpdateWithoutLikesDataInput {
  avatar: String
  bio: String
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTime
  email: String
  firstName: String
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  fullName: String
  id: String
  lastName: String
  loginSecret: String
  messegesReceived: MessageUpdateManyWithoutReceiverInput
  messegesSent: MessageUpdateManyWithoutSenderInput
  posts: PostUpdateManyWithoutAuthorInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  username: String
}

input UserUpdateWithoutMessegesReceivedDataInput {
  avatar: String
  bio: String
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTime
  email: String
  firstName: String
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  fullName: String
  id: String
  lastName: String
  likes: LikeUpdateManyWithoutUserInput
  loginSecret: String
  messegesSent: MessageUpdateManyWithoutSenderInput
  posts: PostUpdateManyWithoutAuthorInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  username: String
}

input UserUpdateWithoutMessegesSentDataInput {
  avatar: String
  bio: String
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTime
  email: String
  firstName: String
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  fullName: String
  id: String
  lastName: String
  likes: LikeUpdateManyWithoutUserInput
  loginSecret: String
  messegesReceived: MessageUpdateManyWithoutReceiverInput
  posts: PostUpdateManyWithoutAuthorInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  username: String
}

input UserUpdateWithoutPostsDataInput {
  avatar: String
  bio: String
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTime
  email: String
  firstName: String
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  fullName: String
  id: String
  lastName: String
  likes: LikeUpdateManyWithoutUserInput
  loginSecret: String
  messegesReceived: MessageUpdateManyWithoutReceiverInput
  messegesSent: MessageUpdateManyWithoutSenderInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  username: String
}

input UserUpdateWithoutRoomsDataInput {
  avatar: String
  bio: String
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTime
  email: String
  firstName: String
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  fullName: String
  id: String
  lastName: String
  likes: LikeUpdateManyWithoutUserInput
  loginSecret: String
  messegesReceived: MessageUpdateManyWithoutReceiverInput
  messegesSent: MessageUpdateManyWithoutSenderInput
  posts: PostUpdateManyWithoutAuthorInput
  updatedAt: DateTime
  username: String
}

input UserUpdateWithWhereUniqueWithoutFollowedByInput {
  data: UserUpdateWithoutFollowedByDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  data: UserUpdateWithoutFollowingDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutRoomsInput {
  data: UserUpdateWithoutRoomsDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsDataInput!
}

input UserUpsertWithoutLikesInput {
  create: UserCreateWithoutLikesInput!
  update: UserUpdateWithoutLikesDataInput!
}

input UserUpsertWithoutMessegesReceivedInput {
  create: UserCreateWithoutMessegesReceivedInput!
  update: UserUpdateWithoutMessegesReceivedDataInput!
}

input UserUpsertWithoutMessegesSentInput {
  create: UserCreateWithoutMessegesSentInput!
  update: UserUpdateWithoutMessegesSentDataInput!
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsDataInput!
}

input UserUpsertWithWhereUniqueWithoutFollowedByInput {
  create: UserCreateWithoutFollowedByInput!
  update: UserUpdateWithoutFollowedByDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput!
  update: UserUpdateWithoutFollowingDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutRoomsInput {
  create: UserCreateWithoutRoomsInput!
  update: UserUpdateWithoutRoomsDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  avatar: NullableStringFilter
  bio: StringFilter
  comments: CommentFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: NullableStringFilter
  followedBy: UserFilter
  following: UserFilter
  fullName: NullableStringFilter
  id: StringFilter
  lastName: NullableStringFilter
  likes: LikeFilter
  loginSecret: NullableStringFilter
  messegesReceived: MessageFilter
  messegesSent: MessageFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  posts: PostFilter
  rooms: RoomFilter
  updatedAt: DateTimeFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  username: String
}
